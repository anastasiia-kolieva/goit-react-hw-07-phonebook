{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","services/contacts-api.js","redux/types.js","redux/actions.js","components/ContactForm/ContactForm.js","redux/operations.js","redux/contacts-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","BASE_URL","a","fetch","result","data","json","newContactToAdd","options","method","body","JSON","stringify","headers","contactId","api","fetchContacts","addContacts","deleteContacts","actionsTypes","handelDeleteContact","changeFilter","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","contactFormSubmithandlerRequest","contactFormSubmithandlerSuccess","contactFormSubmithandlerError","handelDeleteContactRequest","handelDeleteContactSuccess","handelDeleteContactError","ContactForm","onCheckUnique","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","event","target","value","validateForm","alert","resetForm","className","s","form","onSubmit","newContact","preventDefault","id","shortid","generate","actions","then","catch","error","autoComplete","label","type","placeholder","onChange","submit_button","getContacts","state","contacts","items","getFilter","filter","getfilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","Filter","useSelector","filter_title","filter_input","connect","onDeleteContact","operations","map","li","button","onClick","stylesForWrapper","width","margin","paddingTop","stylesForTitles","textAlign","color","App","useEffect","style","isExistContact","find","itemsReducer","createReducer","_","action","payload","filterReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b7d2be3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_title\":\"Filter_filter_title__1GrvV\",\"filter_input\":\"Filter_filter_input__3qvHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactList_li__sTVwo\",\"button\":\"ContactList_button__aXo2O\"};","const BASE_URL = 'http://localhost:4040/contacts';\n\nasync function fetchContacts() {\n  try {\n    const result = await fetch(`${BASE_URL}`);\n    const data = result.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function addContacts(newContactToAdd) {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(newContactToAdd),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  };\n\n  try {\n    const result = await fetch(`${BASE_URL}`, options);\n    const data = result.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function deleteContacts(contactId) {\n  const options = {\n    method: 'DELETE',\n  };\n\n  try {\n    const result = await fetch(`${BASE_URL}/${contactId}`, options);\n    const data = result.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nconst api = {\n  fetchContacts,\n  addContacts,\n  deleteContacts,\n};\n\nexport default api;\n","const handelDeleteContact = 'phonebook/handelDeleteContact';\nconst changeFilter = 'phonebook/changeFilter';\n\nconst actionsTypes = {\n  handelDeleteContact,\n  changeFilter,\n};\n\nexport default actionsTypes;\n","import { createAction } from '@reduxjs/toolkit';\nimport actionsTypes from './types';\n\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\nconst fetchContactsError = createAction('phonebook/fetchContactsError');\n\nconst contactFormSubmithandlerRequest = createAction(\n  'phonebook/contactFormSubmithandlerRequest',\n);\nconst contactFormSubmithandlerSuccess = createAction(\n  'phonebook/contactFormSubmithandlerSuccess',\n);\nconst contactFormSubmithandlerError = createAction(\n  'phonebook/contactFormSubmithandlerError',\n);\n\nconst handelDeleteContactRequest = createAction(\n  'phonebook/handelDeleteContactRequest',\n);\nconst handelDeleteContactSuccess = createAction(\n  'phonebook/handelDeleteContactSuccess',\n);\nconst handelDeleteContactError = createAction(\n  'phonebook/handelDeleteContactError',\n);\n\nconst changeFilter = createAction(actionsTypes.changeFilter);\n\nexport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  contactFormSubmithandlerRequest,\n  contactFormSubmithandlerSuccess,\n  contactFormSubmithandlerError,\n  handelDeleteContactRequest,\n  handelDeleteContactSuccess,\n  handelDeleteContactError,\n  changeFilter,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport s from '../ContactForm/ContactForm.module.css';\nimport shortid from 'shortid';\nimport * as operations from '../../redux/operations';\n\nexport default function ContactForm({ onCheckUnique }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelSubmit = event => {\n    event.preventDefault();\n\n    const isValidateForm = validateForm();\n\n    if (!isValidateForm) {\n      return;\n    }\n\n    dispatch(\n      operations.contactFormSubmithandler({\n        id: shortid.generate(),\n        name,\n        number,\n      }),\n    );\n\n    resetForm();\n  };\n\n  const validateForm = () => {\n    if (!name || !number) {\n      alert('Some field is empty!');\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handelSubmit} autoComplete=\"off\">\n      <label className={s.label}>\n        Name{' '}\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.label}>\n        Number{' '}\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className={s.submit_button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import api from '../services/contacts-api';\nimport * as actions from './actions';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  api\n    .fetchContacts()\n    .then(data => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error)));\n};\n\n// Action-creator- это функция, в которую передаются аргументы. А из себя она возвращает\n// функцию, которая получает dispatch(метод)\n// Прослойка thunk смотрит: если тип action=функция, то она эту функцию просто вызывает. Если нет, она\n// этот action отправляет дальше\n// тоесть отправляется результат функции\n// по результату http запроса, делается dispatch с результатами асинхронки(с данными) отправляешь action\nconst contactFormSubmithandler = newContact => dispatch => {\n  dispatch(actions.contactFormSubmithandlerRequest());\n\n  api\n    .addContacts(newContact)\n    .then(data => dispatch(actions.contactFormSubmithandlerSuccess(data)))\n    .catch(error => dispatch(actions.contactFormSubmithandlerError(error)));\n};\n\nconst handelDeleteContact = contactId => dispatch => {\n  dispatch(actions.handelDeleteContactRequest());\n\n  api\n    .deleteContacts(contactId)\n    .then(() => dispatch(actions.handelDeleteContactSuccess(contactId)))\n    .catch(error => dispatch(actions.handelDeleteContactError(error)));\n};\n\nexport { fetchContacts, contactFormSubmithandler, handelDeleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\n// с мемоизацией\nexport const getfilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    const filteredContacts = items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n\n    return filteredContacts;\n  },\n);\n\n// export const getfilteredContacts = state => {\n//   const items = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   const filteredContacts = items.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n\n//   return filteredContacts;\n// };\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from '../Filter/Filter.module.css';\nimport * as actions from '../../redux/actions';\nimport { getFilter } from '../../redux/contacts-selectors';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h2 className={s.filter_title}>Find contacts by name</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter contact name\"\n        className={s.filter_input}\n        value={value}\n        onChange={event => dispatch(actions.changeFilter(event.target.value))}\n      ></input>\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport s from '../ContactList/ContactList.module.css';\nimport * as operations from '../../redux/operations';\nimport { getfilteredContacts } from '../../redux/contacts-selectors';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id} className={s.li}>\n          {contact.name}: {contact.number}\n          <button\n            className={s.button}\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n    }),\n  ),\n};\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getfilteredContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteContact: contactId =>\n      dispatch(operations.handelDeleteContact(contactId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport { getContacts } from './redux/contacts-selectors';\nimport * as operations from './redux/operations';\n\nconst stylesForWrapper = {\n  width: '500px',\n  margin: '0 auto',\n  paddingTop: '30px',\n};\n\nconst stylesForTitles = {\n  textAlign: 'center',\n  color: '#6B5EAC',\n};\n\nexport default function App() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, []);\n\n  const handelCheckUniqueContact = name => {\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n    isExistContact && alert('Contact is already exist!');\n    return !isExistContact;\n  };\n\n  return (\n    <div style={{ ...stylesForWrapper }}>\n      <h1 style={{ ...stylesForTitles }}>Phonebook</h1>\n\n      <ContactForm onCheckUnique={handelCheckUniqueContact} />\n\n      <h2 style={{ ...stylesForTitles }}>Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\nimport * as actions from './actions';\nimport actionsTypes from './types';\n\nconst itemsReducer = createReducer([], {\n  // это строка потому вычисляемое свойство объекта\n  [actions.fetchContactsSuccess]: (_, action) => action.payload,\n  [actions.handelDeleteContactSuccess]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n  [actions.contactFormSubmithandlerSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n});\n\nconst filterReducer = createReducer('', {\n  [actionsTypes.changeFilter]: (_, action) => action.payload,\n});\n\nconst rootReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n\nconst store = configureStore({\n  reducer: {\n    contacts: rootReducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__23jHE\",\"label\":\"ContactForm_label__30GCC\",\"submit_button\":\"ContactForm_submit_button__2T-V1\"};"],"sourceRoot":""}